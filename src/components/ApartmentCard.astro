---
import type { ApartmentBaseFragment } from '@lib/datocms/types'
import { t } from '@lib/i18n'
import CardLabel from './CardLabel.astro'

export interface Props {
  apartment: ApartmentBaseFragment
  locale: string
  customImage?: {
    url: string
    alt?: string | null
  }
  customDescription?: string
}

const { apartment, locale, customImage, customDescription } = Astro.props

// Get translation using Rosetta
const apartmentLabel = t('apartment', {}, locale)
---

<div class="bg-white rounded-lg shadow-sm hover:shadow-lg transition-shadow overflow-hidden group">
  <a href={`/${locale}/accommodations/${apartment.slug}`} class="block">
    <div class="relative">
      <img
        src={customImage?.url || apartment.featuredImage?.url || apartment.boxImage?.url}
        alt={customImage?.alt || apartment.featuredImage?.alt || apartment.name}
        class="aspect-square w-full object-cover"
      />
      <CardLabel 
        icon="iconoir:home-simple" 
        label={apartmentLabel} 
        iconColor="text-acacia-primary" 
      />
    </div>
    <div class="p-6">
      <div class="flex items-start justify-between gap-2 mb-3">
        <h2 class="text-xl font-semibold text-acacia-primary">
          {apartment.name}
        </h2>
        {apartment.category?.name && (
          <span class="inline-block bg-acacia-secondary text-white text-xs font-medium px-3 py-1 rounded-full flex-shrink-0">
            {apartment.category.name}
          </span>
        )}
      </div>
      <p class="text-gray-600 mb-4">{customDescription || apartment.claim || apartment.highlight}</p>
      <div class="flex justify-between items-center">
        <div class="flex gap-2">
          {apartment.district?.name && (
            <span class="inline-block border border-gray-300 text-gray-600 text-xs px-3 py-1 rounded-full">
              {apartment.district.name}
            </span>
          )}
          {apartment.bedrooms && (
            <span class="inline-block border border-gray-300 text-gray-600 text-xs px-3 py-1 rounded-full">
              {apartment.bedrooms} bed{apartment.bedrooms > 1 ? 's' : ''}
            </span>
          )}
        </div>
        {!customDescription && apartment.price && (
          <div class="text-acacia-secondary font-semibold">{apartment.price}</div>
        )}
      </div>
    </div>
  </a>
</div>